#!/usr/bin/env python3
"""
Script para adicionar colunas faltantes na tabela animais
e criar estrutura completa para CRUD
"""

import sys
from flask import Flask
from flask_sqlalchemy import SQLAlchemy

# Configura√ß√£o direta
DATABASE_URI = 'postgresql://canil_user:canil123@localhost:5432/canil_db'

def add_animal_columns():
    """Adiciona colunas faltantes na tabela animais."""
    
    print("üêï Adicionando Colunas na Tabela Animais...")
    print("=" * 50)
    
    app = Flask(__name__)
    app.config['SQLALCHEMY_DATABASE_URI'] = DATABASE_URI
    app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
    app.config['SECRET_KEY'] = 'temp-key'
    
    db = SQLAlchemy(app)
    
    try:
        with app.app_context():
            with db.engine.connect() as conn:
                print("üîå Conectado ao banco!")
                
                # Verificar estrutura atual
                print("üîç Verificando estrutura atual da tabela animais...")
                
                from sqlalchemy import inspect
                inspector = inspect(db.engine)
                columns = inspector.get_columns('animais')
                
                existing_columns = [col['name'] for col in columns]
                print(f"üìã Colunas existentes: {existing_columns}")
                
                # Colunas que precisamos adicionar
                new_columns = [
                    "ALTER TABLE animais ADD COLUMN IF NOT EXISTS microchip VARCHAR(20) UNIQUE",
                    "ALTER TABLE animais ADD COLUMN IF NOT EXISTS pedigree VARCHAR(50)",
                    "ALTER TABLE animais ADD COLUMN IF NOT EXISTS cor VARCHAR(50)",
                    "ALTER TABLE animais ADD COLUMN IF NOT EXISTS peso DECIMAL(5,2)",
                    "ALTER TABLE animais ADD COLUMN IF NOT EXISTS altura DECIMAL(5,2)",
                    "ALTER TABLE animais ADD COLUMN IF NOT EXISTS status VARCHAR(20) DEFAULT 'Ativo'",
                    "ALTER TABLE animais ADD COLUMN IF NOT EXISTS origem VARCHAR(100)",
                    "ALTER TABLE animais ADD COLUMN IF NOT EXISTS data_aquisicao DATE",
                    "ALTER TABLE animais ADD COLUMN IF NOT EXISTS valor_aquisicao DECIMAL(10,2)",
                    "ALTER TABLE animais ADD COLUMN IF NOT EXISTS observacoes TEXT",
                    "ALTER TABLE animais ADD COLUMN IF NOT EXISTS ativo BOOLEAN DEFAULT true",
                    "ALTER TABLE animais ADD COLUMN IF NOT EXISTS tipo_animal VARCHAR(20) DEFAULT 'Animal'",
                    "ALTER TABLE animais ADD COLUMN IF NOT EXISTS raca_id INTEGER",
                    "ALTER TABLE animais ADD COLUMN IF NOT EXISTS especie_id INTEGER",
                    "ALTER TABLE animais ADD COLUMN IF NOT EXISTS linhagem_id INTEGER",
                    "ALTER TABLE animais ADD COLUMN IF NOT EXISTS mother_id INTEGER",
                    "ALTER TABLE animais ADD COLUMN IF NOT EXISTS father_id INTEGER",
                    "ALTER TABLE animais ADD COLUMN IF NOT EXISTS data_criacao TIMESTAMP DEFAULT CURRENT_TIMESTAMP",
                    "ALTER TABLE animais ADD COLUMN IF NOT EXISTS data_atualizacao TIMESTAMP DEFAULT CURRENT_TIMESTAMP"
                ]
                
                print("üîß Adicionando colunas...")
                
                for sql in new_columns:
                    try:
                        conn.execute(db.text(sql))
                        column_name = sql.split('ADD COLUMN IF NOT EXISTS ')[1].split(' ')[0]
                        print(f"   ‚úÖ {column_name}")
                    except Exception as e:
                        if "already exists" not in str(e):
                            print(f"   ‚ö†Ô∏è  Erro em {sql}: {e}")
                
                # Commit das altera√ß√µes
                conn.commit()
                
                # Criar √≠ndices para performance
                print("\\nüìä Criando √≠ndices para performance...")
                
                indices = [
                    "CREATE INDEX IF NOT EXISTS idx_animais_tenant_id ON animais(tenant_id)",
                    "CREATE INDEX IF NOT EXISTS idx_animais_nome ON animais(nome)",
                    "CREATE INDEX IF NOT EXISTS idx_animais_sexo ON animais(sexo)",
                    "CREATE INDEX IF NOT EXISTS idx_animais_status ON animais(status)",
                    "CREATE INDEX IF NOT EXISTS idx_animais_ativo ON animais(ativo)",
                    "CREATE INDEX IF NOT EXISTS idx_animais_microchip ON animais(microchip)",
                    "CREATE INDEX IF NOT EXISTS idx_animais_data_nascimento ON animais(data_nascimento)"
                ]
                
                for sql in indices:
                    try:
                        conn.execute(db.text(sql))
                        index_name = sql.split('idx_')[1].split(' ')[0]
                        print(f"   ‚úÖ idx_{index_name}")
                    except Exception as e:
                        if "already exists" not in str(e):
                            print(f"   ‚ö†Ô∏è  Erro no √≠ndice: {e}")
                
                conn.commit()
                
                # Verificar estrutura final
                print("\\nüîç Estrutura final da tabela animais:")
                columns_final = inspector.get_columns('animais')
                for col in columns_final:
                    print(f"   üìã {col['name']} ({col['type']})")
                
                return True
                
    except Exception as e:
        print(f"‚ùå Erro: {e}")
        import traceback
        traceback.print_exc()
        return False

def create_sample_animals():
    """Cria alguns animais de exemplo para teste."""
    
    print("\\nüß™ Criando Animais de Exemplo...")
    print("=" * 30)
    
    app = Flask(__name__)
    app.config['SQLALCHEMY_DATABASE_URI'] = DATABASE_URI
    app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
    app.config['SECRET_KEY'] = 'temp-key'
    
    db = SQLAlchemy(app)
    
    try:
        with app.app_context():
            # Modelo simples para inser√ß√£o
            class Animal(db.Model):
                __tablename__ = 'animais'
                id = db.Column(db.Integer, primary_key=True)
                nome = db.Column(db.String(128), nullable=False)
                data_nascimento = db.Column(db.Date, nullable=False)
                sexo = db.Column(db.String(10), nullable=False)
                tenant_id = db.Column(db.Integer, nullable=False)
                microchip = db.Column(db.String(20))
                cor = db.Column(db.String(50))
                peso = db.Column(db.Numeric(5,2))
                status = db.Column(db.String(20), default='Ativo')
                ativo = db.Column(db.Boolean, default=True)
                tipo_animal = db.Column(db.String(20), default='Animal')
            
            from datetime import date
            
            # Verificar se j√° existem animais
            count = db.session.query(Animal).count()
            if count > 0:
                print(f"‚ö†Ô∏è  J√° existem {count} animais no sistema")
                resposta = input("Deseja criar mais animais de exemplo? (s/N): ").lower().strip()
                if resposta != 's':
                    return True
            
            # Animais de exemplo
            animais_exemplo = [
                {
                    'nome': 'Rex',
                    'data_nascimento': date(2023, 1, 15),
                    'sexo': 'M',
                    'tenant_id': 1,
                    'microchip': '123456789012345',
                    'cor': 'Dourado',
                    'peso': 25.5,
                    'status': 'Ativo',
                    'tipo_animal': 'Reprodutor'
                },
                {
                    'nome': 'Luna',
                    'data_nascimento': date(2022, 8, 20),
                    'sexo': 'F',
                    'tenant_id': 1,
                    'microchip': '123456789012346',
                    'cor': 'Caramelo',
                    'peso': 22.0,
                    'status': 'Ativo',
                    'tipo_animal': 'Matriz'
                },
                {
                    'nome': 'Thor',
                    'data_nascimento': date(2023, 12, 10),
                    'sexo': 'M',
                    'tenant_id': 1,
                    'microchip': '123456789012347',
                    'cor': 'Preto',
                    'peso': 8.5,
                    'status': 'Ativo',
                    'tipo_animal': 'Filhote'
                },
                {
                    'nome': 'Mel',
                    'data_nascimento': date(2021, 5, 3),
                    'sexo': 'F',
                    'tenant_id': 1,
                    'microchip': '123456789012348',
                    'cor': 'Mel',
                    'peso': 20.8,
                    'status': 'Reservado',
                    'tipo_animal': 'Animal'
                },
                {
                    'nome': 'Zeus',
                    'data_nascimento': date(2020, 11, 12),
                    'sexo': 'M',
                    'tenant_id': 1,
                    'microchip': '123456789012349',
                    'cor': 'Chocolate',
                    'peso': 28.3,
                    'status': 'Ativo',
                    'tipo_animal': 'Reprodutor'
                }
            ]
            
            print("üêï Criando animais de exemplo...")
            
            for animal_data in animais_exemplo:
                try:
                    # Verificar se j√° existe por microchip
                    existing = db.session.query(Animal).filter_by(
                        microchip=animal_data['microchip']
                    ).first()
                    
                    if existing:
                        print(f"   ‚ö†Ô∏è  {animal_data['nome']} j√° existe (microchip: {animal_data['microchip']})")
                        continue
                    
                    animal = Animal(**animal_data)
                    db.session.add(animal)
                    print(f"   ‚úÖ {animal_data['nome']} ({animal_data['sexo']}, {animal_data['tipo_animal']})")
                    
                except Exception as e:
                    print(f"   ‚ùå Erro ao criar {animal_data['nome']}: {e}")
                    db.session.rollback()
                    continue
            
            # Commit todas as inser√ß√µes
            db.session.commit()
            
            # Verificar resultado
            total = db.session.query(Animal).filter_by(tenant_id=1).count()
            print(f"\\nüìä Total de animais no tenant 1: {total}")
            
            return True
            
    except Exception as e:
        print(f"‚ùå Erro: {e}")
        return False

def test_animal_endpoints():
    """Cria um script de teste para os endpoints de animais."""
    
    print("\\nüß™ Criando Script de Teste...")
    print("=" * 30)
    
    test_script = '''#!/usr/bin/env python3
"""
Script de teste para endpoints de animais
Execute ap√≥s iniciar o servidor com: python run_dev.py
"""

import requests
import json
from datetime import date

# Configura√ß√£o
BASE_URL = "http://localhost:5000/api/v1"
LOGIN_URL = f"{BASE_URL}/auth/login"
ANIMALS_URL = f"{BASE_URL}/animals/"

def get_auth_token():
    """Obt√©m token de autentica√ß√£o."""
    login_data = {
        "login": "admin@canil.com",
        "senha": "admin123"
    }
    
    response = requests.post(LOGIN_URL, json=login_data)
    if response.status_code == 200:
        return response.json()["access_token"]
    else:
        print(f"‚ùå Erro no login: {response.text}")
        return None

def test_list_animals(token):
    """Testa listagem de animais."""
    print("\\nüìã Testando Listagem de Animais...")
    
    headers = {"Authorization": f"Bearer {token}"}
    
    # Listar todos
    response = requests.get(ANIMALS_URL, headers=headers)
    print(f"GET /animals/ - Status: {response.status_code}")
    
    if response.status_code == 200:
        data = response.json()
        print(f"   üìä Total: {data['_meta']['total']} animais")
        for animal in data['items'][:3]:  # Mostrar apenas 3
            print(f"   üêï {animal['nome']} ({animal['sexo']}, {animal['tipo_animal']})")
    
    # Testar filtros
    response = requests.get(f"{ANIMALS_URL}?sexo=M", headers=headers)
    print(f"GET /animals/?sexo=M - Status: {response.status_code}")
    
    response = requests.get(f"{ANIMALS_URL}?search=Rex", headers=headers)
    print(f"GET /animals/?search=Rex - Status: {response.status_code}")

def test_create_animal(token):
    """Testa cria√ß√£o de animal."""
    print("\\n‚ûï Testando Cria√ß√£o de Animal...")
    
    headers = {"Authorization": f"Bearer {token}", "Content-Type": "application/json"}
    
    new_animal = {
        "nome": "Buddy",
        "data_nascimento": "2023-06-15",
        "sexo": "M",
        "cor": "Marrom",
        "peso": 15.2,
        "microchip": "999888777666555",
        "status": "Ativo",
        "tipo_animal": "Animal"
    }
    
    response = requests.post(ANIMALS_URL, json=new_animal, headers=headers)
    print(f"POST /animals/ - Status: {response.status_code}")
    
    if response.status_code == 201:
        animal = response.json()
        print(f"   ‚úÖ Animal criado: ID {animal['id']}, Nome: {animal['nome']}")
        return animal['id']
    else:
        print(f"   ‚ùå Erro: {response.text}")
        return None

def test_get_animal(token, animal_id):
    """Testa busca de animal espec√≠fico."""
    print(f"\\nüîç Testando Busca do Animal ID {animal_id}...")
    
    headers = {"Authorization": f"Bearer {token}"}
    
    response = requests.get(f"{ANIMALS_URL}{animal_id}", headers=headers)
    print(f"GET /animals/{animal_id} - Status: {response.status_code}")
    
    if response.status_code == 200:
        animal = response.json()
        print(f"   ‚úÖ Animal encontrado: {animal['nome']}")
        return animal
    else:
        print(f"   ‚ùå Erro: {response.text}")
        return None

def test_update_animal(token, animal_id):
    """Testa atualiza√ß√£o de animal."""
    print(f"\\n‚úèÔ∏è Testando Atualiza√ß√£o do Animal ID {animal_id}...")
    
    headers = {"Authorization": f"Bearer {token}", "Content-Type": "application/json"}
    
    update_data = {
        "peso": 16.5,
        "observacoes": "Animal muito d√≥cil e brincalh√£o"
    }
    
    response = requests.put(f"{ANIMALS_URL}{animal_id}", json=update_data, headers=headers)
    print(f"PUT /animals/{animal_id} - Status: {response.status_code}")
    
    if response.status_code == 200:
        animal = response.json()
        print(f"   ‚úÖ Animal atualizado: Peso {animal['peso']}kg")
        return animal
    else:
        print(f"   ‚ùå Erro: {response.text}")
        return None

def test_animal_stats(token):
    """Testa estat√≠sticas de animais."""
    print("\\nüìä Testando Estat√≠sticas...")
    
    headers = {"Authorization": f"Bearer {token}"}
    
    response = requests.get(f"{ANIMALS_URL}stats", headers=headers)
    print(f"GET /animals/stats - Status: {response.status_code}")
    
    if response.status_code == 200:
        stats = response.json()
        print(f"   üìä Total: {stats['total']}")
        print(f"   üìä Ativos: {stats['ativos']}")
        print(f"   üìä Machos: {stats['machos']}")
        print(f"   üìä F√™meas: {stats['femeas']}")
        print(f"   üìä Por status: {stats['por_status']}")

def test_toggle_status(token, animal_id):
    """Testa altera√ß√£o de status."""
    print(f"\\nüîÑ Testando Toggle Status do Animal ID {animal_id}...")
    
    headers = {"Authorization": f"Bearer {token}"}
    
    response = requests.patch(f"{ANIMALS_URL}{animal_id}/toggle-status", headers=headers)
    print(f"PATCH /animals/{animal_id}/toggle-status - Status: {response.status_code}")
    
    if response.status_code == 200:
        animal = response.json()
        status = "ativo" if animal['ativo'] else "inativo"
        print(f"   ‚úÖ Status alterado para: {status}")

def test_delete_animal(token, animal_id):
    """Testa exclus√£o de animal."""
    print(f"\\nüóëÔ∏è Testando Exclus√£o do Animal ID {animal_id}...")
    
    headers = {"Authorization": f"Bearer {token}"}
    
    response = requests.delete(f"{ANIMALS_URL}{animal_id}", headers=headers)
    print(f"DELETE /animals/{animal_id} - Status: {response.status_code}")
    
    if response.status_code == 204:
        print("   ‚úÖ Animal deletado com sucesso")
    else:
        print(f"   ‚ùå Erro: {response.text}")

def main():
    """Executa todos os testes."""
    print("üß™ Teste Completo dos Endpoints de Animais")
    print("=" * 50)
    
    # 1. Autentica√ß√£o
    print("üîê Fazendo login...")
    token = get_auth_token()
    if not token:
        print("‚ùå Falha na autentica√ß√£o. Verifique se o servidor est√° rodando.")
        return
    
    print("‚úÖ Login realizado com sucesso!")
    
    # 2. Listar animais
    test_list_animals(token)
    
    # 3. Criar animal
    animal_id = test_create_animal(token)
    
    if animal_id:
        # 4. Buscar animal
        test_get_animal(token, animal_id)
        
        # 5. Atualizar animal
        test_update_animal(token, animal_id)
        
        # 6. Toggle status
        test_toggle_status(token, animal_id)
        
        # 7. Estat√≠sticas
        test_animal_stats(token)
        
        # 8. Deletar animal (opcional)
        print("\\n‚ùì Deseja deletar o animal de teste?")
        resposta = input("Digite 's' para deletar: ").lower().strip()
        if resposta == 's':
            test_delete_animal(token, animal_id)
    
    print("\\nüéâ Testes conclu√≠dos!")

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\\n\\nüëã Testes interrompidos!")
    except Exception as e:
        print(f"\\n‚ùå Erro durante os testes: {e}")
'''
    
    try:
        with open('test_animal_endpoints.py', 'w', encoding='utf-8') as f:
            f.write(test_script)
        print("‚úÖ Script de teste criado: test_animal_endpoints.py")
        return True
    except Exception as e:
        print(f"‚ùå Erro ao criar script: {e}")
        return False

def main():
    """Fun√ß√£o principal."""
    
    print("üêï CanilApp - Configura√ß√£o de Animais")
    print("=" * 50)
    
    success = True
    
    # 1. Adicionar colunas na tabela animais
    print("\\nüîß Etapa 1: Estrutura da Tabela")
    if not add_animal_columns():
        success = False
    
    # 2. Criar animais de exemplo
    print("\\nüß™ Etapa 2: Dados de Exemplo")
    if not create_sample_animals():
        print("‚ö†Ô∏è  Falha ao criar animais de exemplo")
    
    # 3. Criar script de teste
    print("\\nüß™ Etapa 3: Script de Testes")
    if not test_animal_endpoints():
        print("‚ö†Ô∏è  Falha ao criar script de teste")
    
    if success:
        print("\\nüéâ Configura√ß√£o de animais conclu√≠da!")
        print("\\nüìã Pr√≥ximos passos:")
        print("1. Execute: python run_dev.py")
        print("2. Teste: python test_animal_endpoints.py")
        print("3. Ou use curl para testar manualmente")
        
        print("\\nüß™ Exemplos de teste manual:")
        print("# Listar animais")
        print("curl -X GET http://localhost:5000/api/v1/animals/ \\\\")
        print('  -H "Authorization: Bearer SEU_TOKEN"')
        
        print("\\n# Criar animal")
        print("curl -X POST http://localhost:5000/api/v1/animals/ \\\\")
        print('  -H "Authorization: Bearer SEU_TOKEN" \\\\')
        print('  -H "Content-Type: application/json" \\\\')
        print('  -d \'{"nome": "Bolt", "data_nascimento": "2023-01-01", "sexo": "M"}\'')
    else:
        print("\\nüí• Algumas etapas falharam!")
    
    return success

if __name__ == '__main__':
    try:
        success = main()
        sys.exit(0 if success else 1)
    except KeyboardInterrupt:
        print("\\n\\nüëã Script interrompido!")
        sys.exit(0)
    except Exception as e:
        print(f"\\n‚ùå Erro inesperado: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)